/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019-2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";

import "combat.proto";
import "geometry.proto";

package pxd.proto;

/**
 * Hardcoded data defining a type of fungible item.
 */
message ItemData
{

  /** The cargo space it uses per unit.  */
  optional uint32 space = 1;

  /**
   * Data about the ability to refine items of this type to other item types
   * (i.e. raw materials into refined resources).
   */
  message RefiningData
  {

    /** Number of instances going into one "refining unit".  */
    optional uint32 input_units = 1;

    /** Base cost (burnt) in vCHI for one refinement step.  */
    optional uint32 cost = 2;

    /**
     * The outputs (as item type, amount) for one refining step (i.e.
     * "input_units" input units).
     */
    map<string, uint32> outputs = 3;

  }

  /** If this type of item can be refined, then the stats for doing so.  */
  optional RefiningData refines = 2;

}

/**
 * Hardcoded data defining a type of building.
 */
message BuildingData
{

  /**
   * The enter/exit L1 radius of this building.  Characters can enter
   * the building if they are within this L1 radius of the centre coordinate,
   * and when exiting, they will appear on a random spot within that radius.
   */
  optional uint32 enter_radius = 1;

  /**
   * All tiles that make up the building's shape, in the basic, untransformed
   * way.  The coordinates are relative to the building's centre.
   */
  repeated HexCoord shape_tiles = 2;

  /**
   * Combat data (attacks) the building has in its base (unupgraded)
   * form, if any.
   */
  optional CombatData combat_data = 3;

  /**
   * Maximum HP and regeneration data the building has in its base form.
   */
  optional RegenData regen_data = 4;

  /**
   * The set of services offered by a building.  Since "false" is the default
   * value for a boolean field, only those services that are offered need to
   * be listed in the actual config data.
   */
  message Services
  {
    optional bool refining = 1;
  }

  /** Services this building type offers.  */
  optional Services offered_services = 5;

}

/**
 * Data for the resource distribution on the map (when prospecting).
 * This is based on multiple "areas" where one or two resources occur.
 * Each area has a central x/y coordinate.  Then within a core L1 radius
 * around this area, those resources appear with "full chance".  Towards
 * an outer radius, the chance falls off to zero linearly.  If multiple
 * areas overlap (or there are two resources in one), then we pick between
 * them based on their chances as weights.
 *
 * The radii themselves are just constants in the source code.  The proto
 * data in this message holds the more complex things, like the list of
 * areas and the amounts per resource type.
 */
message ResourceDistribution
{

  /**
   * The "base amount" of resource to be found for each resource type in
   * a region.  These numbers fall off to zero (with a minimum of one unit)
   * as with the chance.  If we denote the resulting number by X, then the
   * actual amount found will be uniformly chosen from [X, 2X].
   */
  map<string, uint32> base_amounts = 1;

  /**
   * One area where resources can be found.
   */
  message Area
  {

    /** The centre coordinate of the area.  */
    optional HexCoord centre = 1;

    /** The type(s) of resources to be found here.  */
    repeated string resources = 2;

  }

  /** Resource areas.  */
  repeated Area areas = 2;

}

/**
 * The hardcoded "configuration data" for Taurion.  This includes all data
 * that describes read-only aspects of the game, like known item or vehicle
 * types and stats for them.
 *
 * An instance of this proto is populated from text format encoded in
 * roconfig/<files>.pb.text and made available to all parts of the code.
 */
message ConfigData
{

  /** Known types of fungible items.  */
  map<string, ItemData> fungible_items = 1;

  /** Known types of buildings.  */
  map<string, BuildingData> building_types = 2;

  /** Distribution of resources for prospecting.  */
  optional ResourceDistribution resource_dist = 3;

}
