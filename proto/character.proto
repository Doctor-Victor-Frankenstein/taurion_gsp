/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";

import "combat.proto";
import "movement.proto";

package pxd.proto;

/**
 * Data representing an on-going prospection by a character.
 */
message OngoingProspection
{

  /* There are no fields required.  The only piece of data is which region
     is being prospected, but that is implicit from the character's
     position on the map.

     This message is simply used as a flag to indicate that a prospecting
     operation is ongoing in the character's "busy" oneof.  */

}

/**
 * Data about the mining state of a character.
 */
message MiningData
{

  /** The mining speed, in units per block.  */
  optional uint64 rate = 1;

  /** Set to true if the character is currently mining.  */
  optional bool active = 2;

}

/**
 * The state of one character in the game.  Note that this does not include
 * data fields that are stored directly in database columns, namely those on
 * which the database keeps indices.
 */
message Character
{

  /** Active movement of the character, if any.  */
  optional Movement movement = 1;

  /**
   * The attacked target (if any).  The presence of this field also tells us
   * that there are enemies in range, which is important for area attacks.
   * So even if e.g. a character has just area attacks, we need to select
   * one target for them nevertheless, as we later on only process attacks
   * of characters with a selected target.
   */
  optional TargetId target = 2;

  /**
   * Static combat data for thie character.  That data is derived from other
   * information (e.g. equipped weapons, current vehicle), but it is cached
   * here for easy computation of combat.  The data here changes only
   * through explicit actions done by the owner.
   */
  optional CombatData combat_data = 3;

  /**
   * If the character is currently busy, then this holds data about the
   * currently ongoing operation.
   */
  oneof busy
  {
    OngoingProspection prospection = 4;
  }

  /** The character's mining data, if it can mine.  */
  optional MiningData mining = 5;

  /** Movement speed of the character.  */
  optional uint32 speed = 6;

  /** Total cargo space the character has.  */
  optional uint64 cargo_space = 7;

  /* Fields that are stored directly in the database and thus not part of the
     encoded protocol buffer:

     - int ID
     - string owner
     - int faction
     - position on the map
     - volatile movement proto (partial step, blocked for counter)
     - current HP proto
     - HP regeneration data proto
     - number of blocks the character is still "busy"
     - inventory proto
  */

}
