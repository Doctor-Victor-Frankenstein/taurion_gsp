/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019-2020  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";

import "modifier.proto";

package pxd.proto;

/**
 * Identifier for a target of attacks.  This can be either a character (in a
 * vehicle on the map) or a building.
 */
message TargetId
{

  /**
   * Different types of target.  The type determines where the data is stored
   * in the database and how it is accessed.
   */
  enum Type
  {
    INVALID_TYPE = 0;
    TYPE_CHARACTER = 1;
    TYPE_BUILDING = 2;
  }

  /** The type of this target.  */
  optional Type type = 1;

  /**
   * The database ID of this target entity (based on its type).  Absence of
   * this field means that the target is "empty" / null / there is no target.
   */
  optional uint64 id = 2;

}

/**
 * Modifications done to a combat entity's stats due to attacks (e.g.
 * slowing or range reduction).
 */
message CombatEffects
{

  /** Modification to the speed.  */
  optional StatModifier speed = 1;

}

/**
 * An attack that a character or building has.  This data is either hardcoded
 * (for buildings) or derived from other stuff (like equipped weapons).  But
 * it is stored in the current form in the game state as a sort of "cache"
 * while processing combat in each round.  (It only needs to be updated
 * when an explicit action is done by the owner of a character.)
 */
message Attack
{

  /**
   * The range of the attack (as L1 distance on our hex grid).  This may be
   * zero in which case it affects only enemies on the same tile.
   *
   * If the value is missing entirely instead, it implies that there will not
   * be a concrete "target", which is the case e.g. for AoE effects
   * around the attacker itself.
   */
  optional uint32 range = 1;

  /**
   * The size of the AoE for this attack, around the selected target (if range
   * is present) or the attacker (if range is not present).  If this is not
   * present, then it means that only the target itself is affected.
   */
  optional uint32 area = 2;

  /**
   * Data about the damage a particular attack does.
   */
  message Damage
  {
    /* Maximum and minimum damage of the attack.  The actual damage will be
       chosen uniformly from the both-inclusive range.  */
    optional uint32 min = 1;
    optional uint32 max = 2;
  }

  /** If this attack does damage, the stats for it.  */
  optional Damage damage = 3;

  /** If this attack has non-damage effects, the stats for it.  */
  optional CombatEffects effects = 4;

}

/**
 * Stats for a boost to combat stats that is in effect when a character
 * has low armour HP (i.e. "final breath" attack).
 */
message LowHpBoost
{

  /** The percentage of armour HP at which it activates.  */
  optional uint32 max_hp_percent = 1;

  /** Boost to damage.  */
  optional StatModifier damage = 2;

  /** Boost to range.  */
  optional StatModifier range = 3;

}

/**
 * Small utility message to hold stats about HP (both the permanent
 * armour-based ones and the regenerating shield).
 */
message HP
{

  /** The "permanent" armour based HP.  */
  optional uint32 armour = 1;

  /** The regenerating, shield-based HP.  */
  optional uint32 shield = 2;

  /**
   * Partially regnerated shield HP.  This is in units of 1/1000 HP point,
   * so that the shield is incremented by one when this reaches 1000.
   *
   * This field is only present for the current HP of a fighter, not the
   * maximum HP in its CombatData.
   */
  optional uint32 shield_mhp = 3;

}

/**
 * Data relevant for HP regeneration.  This is split out from the main
 * combat data, because it needs to be accessed for every fighter all the
 * time to figure out if they need regeneration.
 */
message RegenData
{

  /** Maximum HP of the fighter.  */
  optional HP max_hp = 1;

  /** Regeneration rate of shield HP in "milli HP per block".  */
  optional uint32 shield_regeneration_mhp = 2;

}

/**
 * All data related to combat that a fighter entity (character or building) has.
 * This only includes basic properties of the fighter and not more dynamic
 * data like the current target or the current HP, nor specific data that
 * is frequently accessed like HP regeneration.
 */
message CombatData
{

  /** The offensive attacks the figher has.  */
  repeated Attack attacks = 1;

  /** Any low-HP boosts for the fighter.  */
  repeated LowHpBoost low_hp_boosts = 2;

}
