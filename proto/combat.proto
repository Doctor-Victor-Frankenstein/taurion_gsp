/*
    GSP for the Taurion blockchain game
    Copyright (C) 2019  Autonomous Worlds Ltd

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto2";

package pxd.proto;

/**
 * Identifier for a target of attacks.  This can be either a character (in a
 * vehicle on the map) or a building.
 */
message TargetId
{

  /**
   * Different types of target.  The type determines where the data is stored
   * in the database and how it is accessed.
   */
  enum Type
  {
    INVALID_TYPE = 0;
    TYPE_CHARACTER = 1;
    TYPE_BUILDING = 2;
  }

  /** The type of this target.  */
  optional Type type = 1;

  /** The database ID of this target entity (based on its type).  */
  optional uint64 id = 2;

}

/**
 * An attack that a character or building has.  This data is either hardcoded
 * (for buildings) or derived from other stuff (like equipped weapons).  But
 * it is stored in the current form in the game state as a sort of "cache"
 * while processing combat in each round.  (It only needs to be updated
 * when an explicit action is done by the owner of a character.)
 */
message Attack
{

  /** The range of the attack (as L1 distance on our hex grid).  */
  optional uint32 range = 1;

  /* Maximum and minimum damage of the attack.  The actual damage will be
     chosen uniformly from the both-inclusive range.  */
  optional uint32 min_damage = 2;
  optional uint32 max_damage = 3;

}

/**
 * Small utility message to hold stats about HP (both the permanent
 * armour-based ones and the regenerating shield).
 */
message HP
{

  /** The "permanent" armour based HP.  */
  optional uint32 armour = 1;

  /** The regenerating, shield-based HP.  */
  optional uint32 shield = 2;

  /**
   * Partially regnerated shield HP.  This is in units of 1/1000 HP point,
   * so that the shield is incremented by one when this reaches 1000.
   *
   * This field is only present for the current HP of a fighter, not the
   * maximum HP in its CombatData.
   */
  optional uint32 shield_mhp = 3;

}

/**
 * All data related to combat that a fighter entity (character or building) has.
 * This only includes basic properties of the fighter and not more dynamic
 * data like the current target or the current HP.
 */
message CombatData
{

  /** The offensive attacks the figher has.  */
  repeated Attack attacks = 1;

  /** Maximum HP of the fighter.  */
  optional HP max_hp = 2;

  /** Regeneration rate of shield HP in "milli HP per block".  */
  optional uint32 shield_regeneration_mhp = 3;

}
